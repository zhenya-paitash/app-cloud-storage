import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { EnumFileType, FileEntity } from './entities/file.entity';

@Injectable()
export class FilesService {
  /**
   * This is a constructor function that injects a repository of FileEntity objects.
   *
   * @param repository The "repository" parameter is an instance of the TypeORM
   * Repository class that is used to interact with the database table for the
   * "FileEntity" entity. It is injected into the constructor using the
   * @InjectRepository decorator, which is provided by the TypeORM library. This
   * allows the class to use the
   */
  constructor(
    @InjectRepository(FileEntity) private repository: Repository<FileEntity>,
  ) {}

  /**
   * This function finds all files belonging to a specific user, with an optional
   * filter for photos or deleted files.
   *
   * @param userId a number representing the user ID for which to find files.
   * @param fileType The `fileType` parameter is an enumeration type (`EnumFileType`)
   * that specifies the type of files to be retrieved. The function uses this
   * parameter to filter the files based on their `mimetype` or `deletedAt`
   * properties. If `fileType` is `PHOTOS`, the function retrieves
   * @return The function `findAll` is returning an array of files that belong to a
   * specific user, filtered by file type. If the `fileType` parameter is
   * `EnumFileType.PHOTOS`, it will only return files with a mimetype that contains
   * the word "image". If the `fileType` parameter is `EnumFileType.TRASH`, it will
   * return files that have been soft-deleted (marked as
   */
  findAll(userId: number, fileType: EnumFileType) {
    const qb = this.repository.createQueryBuilder('file');
    qb.where('file.userId = :userId', { userId });

    if (fileType === EnumFileType.PHOTOS) {
      qb.andWhere('file.mimetype ILIKE :type', { type: '%image%' });
    }

    if (fileType === EnumFileType.TRASH) {
      qb.withDeleted().andWhere('file.deletedAt IS NOT NULL');
    }

    return qb.getMany();
  }

  /**
   * This function creates a new file record in a database with information about the
   * file and the user who uploaded it.
   *
   * @param file The `file` parameter is an object of type `Express.Multer.File`,
   * which is a file object that is generated by the Multer middleware in an
   * Express.js application. It contains information about the uploaded file, such as
   * its filename, original name, size, and mimetype.
   * @param userId The `userId` parameter is a number representing the ID of the user
   * who uploaded the file. It is used to associate the file with the user in the
   * database.
   * @return The `create` method is returning a Promise that resolves to the saved
   * file object in the database. The file object contains properties such as
   * `filename`, `originalName`, `size`, `mimetype`, and a reference to the user who
   * uploaded the file.
   */
  create(file: Express.Multer.File, userId: number) {
    return this.repository.save({
      filename: file.filename,
      originalName: file.originalname,
      size: file.size,
      mimetype: file.mimetype,
      user: {
        id: userId,
      },
    });
  }

  /**
   * This function removes files associated with a specific user and specified IDs.
   *
   * @param userId The user ID is a number that identifies the user whose files are
   * being deleted.
   * @param ids The `ids` parameter is a string that contains comma-separated values
   * of file IDs that need to be removed. These IDs are then split into an array
   * using the `split()` method and used in the query to delete the corresponding
   * files.
   * @return The `execute()` method is being called on the `qb` query builder object
   * after calling the `softDelete()` method. This will execute the query and return
   * a Promise that resolves to a `DeleteResult` object.
   */
  remove(userId: number, ids: string) {
    const qb = this.repository.createQueryBuilder('file');
    qb.where('id IN (:...ids) AND userId = :userId', {
      ids: ids.split(','),
      userId,
    });

    return qb.softDelete().execute();
  }
}
